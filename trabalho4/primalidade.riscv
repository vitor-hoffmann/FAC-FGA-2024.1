.data
primo: 
  .string "sim\n" 
naoprimo: 
  .string "nao\n" 
invalido: 
  .string "Entrada invalida.\n" 

.text
main:
    # Ler entrada do usuário
    li a7, 5         # Código de leitura do sistema
    ecall            # Chamar o sistema para ler a entrada
    mv t0, a0        # Mover o valor lido para t0

    # Verificar se o valor é menor ou igual a zero
    blez t0, menorigualzero   # Se t0 <= 0, pular para menorigualzero

    # Verificar se o valor é igual a 1
    li t6, 1
    beq t0, t6, naoeprimo  # Se t0 == 1, pular para naoeprimo

    # Iniciar a verificação de primalidade
    addi t1, t0, -1  # t1 = t0 - 1
    j verificaprimo

subtrai:
    addi t1, t1, -1  # t1 = t1 - 1
    j verificaprimo

verificaprimo:
    rem t2, t0, t1   # t2 = t0 % t1
    beq t1, t6, eprimo # Se t1 == 1, pular para eprimo
    beqz t2, naoeprimo # Se t2 == 0, pular para naoeprimo
    bnez t1, subtrai # Se t1 != 0, pular para subtrai

eprimo:
    # Imprimir "sim\n"
    li a0, 1
    la a1, primo
    li a2, 4
    li a7, 64
    ecall
    j end

naoeprimo:
    # Imprimir "nao\n"
    li a0, 1
    la a1, naoprimo
    li a2, 4
    li a7, 64
    ecall
    j end

menorigualzero:
    # Imprimir "Entrada invalida.\n"
    li a0, 1
    la a1, invalido
    li a2, 18
    li a7, 64
    ecall
    j end

end:
    # Encerrar o programa
    li a7, 10
    ecall
