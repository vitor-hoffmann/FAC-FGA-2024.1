.data
invalido: 
  .string "Entrada invalida.\n"
newline: 
  .string "\n"

.text
main:
    # Ler entrada do usuário
    li a7, 5         # Código de leitura do sistema
    ecall            # Chamar o sistema para ler a entrada
    mv t0, a0        # Mover o valor lido para t0
    
    li a7, 5         # Código de leitura do sistema
    ecall            # Chamar o sistema para ler a entrada
    mv t1, a0        # Mover o valor lido para t1

    # Verificar se o valor é menor ou igual a zero
    blez t0, menorigualzero   # Se t0 <= 0, pular para menorigualzero
    li t6, 1 # Verificar se o valor é igual a 1
    beq t0, t6, menorigualzero
    
    # Verificar se o valor é menor ou igual a zero
    blez t1, menorigualzero   # Se t1 <= 0, pular para menorigualzero
    li t6, 1 # Verificar se o valor é igual a 1
    beq t1, t6, menorigualzero

    # Calcular o MDC usando o Algoritmo de Euclides
    mv a0, t0   # Passar t0 para a0
    mv a1, t1   # Passar t1 para a1
    jal ra, mdc # Chamar a função mdc
    mv t2, a0   # Armazenar o resultado do MDC em t2

    # Calcular o MMC
    mv a0, t0   # Passar t0 para a0
    mv a1, t1   # Passar t1 para a1
    mul a2, a0, a1   # a2 = t0 * t1
    div a3, a2, t2   # a3 = (t0 * t1) / MDC
    mv t3, a3   # Armazenar o resultado do MMC em t3


    mv a0, t2   # Passar o resultado do MDC para impressão
    li a7, 1
    ecall

    # Imprimir nova linha
    la a0, newline
    li a7, 4
    ecall


    mv a0, t3   # Passar o resultado do MMC para impressão
    li a7, 1
    ecall

    # Imprimir nova linha
    la a0, newline
    li a7, 4
    ecall

    j end

menorigualzero:
    # Imprimir "Entrada invalida.\n"
    li a0, 1
    la a1, invalido
    li a2, 18
    li a7, 64
    ecall
    j end

end:
    # Encerrar o programa
    li a7, 10
    ecall

mdc:
    # Algoritmo de Euclides para encontrar o MDC
    mv t4, a0  # t4 = a
    mv t5, a1  # t5 = b
mdc_loop:
    beq t5, zero, mdc_done # Se b == 0, termine
    rem t6, t4, t5         # t6 = a % b
    mv t4, t5              # a = b
    mv t5, t6              # b = a % b
    j mdc_loop
mdc_done:
    mv a0, t4              # Retornar MDC em a0
    ret
